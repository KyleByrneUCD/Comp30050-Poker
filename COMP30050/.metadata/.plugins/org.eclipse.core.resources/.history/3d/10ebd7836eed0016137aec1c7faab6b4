package poker;

import java.util.ArrayList;
import java.util.Random;

/*
 * This class implements encapsulation
 * The methods in this class are synchronized meaning that they are thread safe
 * Methods marked as synchronized can only be accessed by 1 thread at a time.
 */
public class DeckOfCards {
	private ArrayList<PlayingCard> deck = new ArrayList<PlayingCard>();
	
	public ArrayList<PlayingCard> getDeck(){	// Getter for the deck
		return deck;
	}
	
	DeckOfCards() {
		createDeck();
	}
	
	private synchronized void createDeck() {
		for (int i = 0; i < 4; i++) { // loop through suits
			for (int j = 0; j < 13; j++) { // loop through cards
				switch (i) { // switch statement. controls which suit each card gets
				case 0:
					deck.add(new PlayingCard(PlayingCard.FACES[j], PlayingCard.HEARTS, j + 1));
					break;
				case 1:
					deck.add(new PlayingCard(PlayingCard.FACES[j], PlayingCard.DIAMONDS, j + 1));
					break;
				case 2:
					deck.add(new PlayingCard(PlayingCard.FACES[j], PlayingCard.CLUBS, j + 1));
					break;
				case 3:
					deck.add(new PlayingCard(PlayingCard.FACES[j], PlayingCard.SPADES, j + 1));
					break;
				}
			}
		}
	}

	public synchronized void reset() {	//resets the deck and shuffles it
		deck.removeAll(deck);
		createDeck();
		shuffle();
	}

	public synchronized void shuffle() {		// Swaps 2 cards in the deck a large number of times to shuffle
		Random randomNumber = new Random();	
		for (int i = 0; i < deck.size() * deck.size(); i++) {	
			int card1 = randomNumber.nextInt(deck.size());
			int card2 = randomNumber.nextInt(deck.size());
			PlayingCard temp = deck.get(card1);
			deck.set(card1, deck.get(card2));
			deck.set(card2, temp);
		}
	}

	public synchronized PlayingCard dealNext() {
		try {
			return deck.remove(0);	// take the top card off of the deck
		} catch (IndexOutOfBoundsException e) {
			System.err.println("There are no more Cards in the deck, unable to draw card.");	
			throw new IndexOutOfBoundsException();
		}
	}

	public synchronized void returnCard(PlayingCard discarded) {	// add a card back into the deck
		deck.add(discarded);
	}
}
